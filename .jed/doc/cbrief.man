.TH CBRIEF 8 2022-08-20 "GNU" "Application Manual"

.SH NAME
CBRIEF macro pacakge for JED

.SH SYNOPSIS
This Emulation Based on BRIEF V3.1, 1991
and secondary on BRIEF v2.1, 1988

.SH Basic keys
.TS
tab(\t) allbox;
l ax .
[^Q]	Halt/ESC
[ESC]	Escape. ESC somehow to abort
[BS]	Backspace
[Enter]	Enter / new line
[Ctrl+Enter]	Open Line
[Tab]	Inserts Tab or indents a block
[Shift+Tab]	Back Tab or outdents a block
.TE

.SH Alt Keys
.TS
tab(\t) allbox;
l ax .
[Alt+BS]	Delete next word
[Alt+0..9]	Drop Bookmark 1-10
[Alt+A]	Non-inclusive Mark
[Alt+B]	Buffer List (buffer managment list)
[Alt+C]	Column Selection Mark
[Alt+D]	Delete Line
[Alt+E]	Edit File (open file)
[Alt+F]	Search again (display filename in BRIEF)
[Alt+G]	Go To Line
[Alt+H]	Help
[Alt+I]	Insert Mode Toggle 
[Alt+J]	Jump to Bookmark
[Alt+K]	Delete to EOL (Ctrl+K delete to BOL)
[Alt+L]	Line Selection Mark
[Alt+M]	Normal Selection Mark
[Alt+N]	Next Buffer (Alt+P = prev)
[Alt+O]	Change Output File (Save As). Renames the file in memory but not save.
[Alt+P]	Previous Buffer (Print in BRIEF)
[Alt+Q]	Quote (Insert Keycode)
[Alt+R]	Read File into Buffer
[Alt+S]	Search Forward (Ctrl+S search bwd)
[Alt+T]	Translate (replace) Forward
[Alt+U]	Undo
[Alt+V]	Display Version ID
[Alt+W]	Write buffer or block to disk (Save)
[Alt+X]	Exit (and ask to save or not)
[Alt+Z]	Jump to Shell. BRIEF runs command.com, returns with exit. Jed console, suspend, returns with fg. XJed runs a terminal emulator.
[Alt+-]	Previous Buffer (BRIEF key)
.TE

.SH Control Keys
.TS
tab(\t) allbox;
l ax .
[Ctrl+BS]	Delete Previous Word
[Ctrl+A]/[F12]	JED Menu
[Ctrl+B]	Line to Bottom
[Ctrl+C]	Copy (no BRIEF key)
[Alt+Ctrl+C]/[Keypad-5]	Center Line in Window, Windows Copy
[Ctrl+D]	Scroll Buffer Down
[Ctrl+E]	Scroll Buffer Up
[Ctrl+F]	Search again backward
[Ctrl+G]	Go To Routines (popup list and select)
[Ctrl+H]	JED's Help (help_prefix)
[Ctrl+K]	Delete to beginning of line
[Ctrl+L]	Redraw, not a BRIEF key, but Unix one
[Ctrl+N]	Next Error
[Ctrl+P]	Pop Up Error Window
[Ctrl+R]	Repeat (example: ^R72-)
[Ctrl+S]	Search backward (no BRIEF key)
[Ctrl+T]	Line to Top
[Ctrl+U]	Redo
[Ctrl+V]	Paste (no BRIEF key)
[Ctrl+W]	Backup File Toggle
[Ctrl+X]	Cut (no BRIEF key)
[Ctrl+Z]	Zoom Window (one window)
[Ctrl+-]	Delete Current Buffer
.TE

.SH Arrows and special keys
.TS
tab(\t) allbox;
l ax .
[Insert]/[Keypad-0]	Paste from Scrap
[Delete]/[Keypad-.]	Delete block or next character
[Home]/[Keypad-7]	Beginning of Line
[Home][Home]	Top of Window
[Home][Home][Home]	Top of Buffer
[End]/[Keypad-1]	End of line
[End][End]	End of Window
[End][End][End]	End of Buffer
[PgUp]/[Keypad-9]	Page up
[PgDn]/[Keypad-3]	Page Down
[Shift+Home]	Left side of Window
[Shift+End]	Right side of Window
[Ctrl+PgUp]	Top of Buffer
[Ctrl+PgDn]	End of Buffer
[Ctrl+Home]	Top of Window
[Ctrl+End]	End of Window
.TE

.SH Keypad (Numeric Pad)
.TS
tab(\t) allbox;
l ax .
[Keypad-Plus]	Copy
[Keypad-Minus]	Cut to Scrap
[Keypad-Multiply]	Undo
[Keypad-Enter]	Enter
[Keypad-Ins]	Paste
[Keypad-Del]	Delete block or next character
.TE

.SH Arrows and Keypad-arrows
.TS
tab(\t) allbox;
l ax .
[Left]/[Right]	Left/Right
[Up]/[Down]	Up/Down
[Ctrl+Left]	Previous Word
[Ctrl+Right]	Next Word
.TE

.SH Function keys
.TS
tab(\t) allbox;
l ax .
[F1]	Change Window
[Ctrl+F1]	Help on word under the cursor
[F2]	Resize Window
[Alt+F2]	Zoom Window
[F3]	Create Window
[F4]	Delete Window
[F5]	Search Forward
[Alt+F5]	Search Backward
[Shift+F5]	Search Again
[Ctrl+F5]	Case Sensitive Toggle
[F6]	Tanslate (replace)  Forward
[Alt+F6]	Translate Backward
[Shift+F6]	Translate Again
[Ctrl+F6]	Regular Expr. Toggle
[F7]	Remember (record macro)
[F8]	Playback (execute macro)
[Shift+F8]	JED's Macro Query. If not in the mini buffer and if during keyboard macro, allow user to enter different text each time macro is executed
[F10]	CBRIEF's Command line
[Alt+F10]	Compile Buffer
[Ctrl+F10]	Make (non-brief)
[Ctrl+F9]	Borland's compile key
[F9]	Make (Borland's build and run)
[F11]	JED's Dired
[Ctrl+F11]	JED's moccur
[F12]	JED's menu
[Ctrl+F12]	Select color schema
.TE

.SH X Windows (XJed Only)
.TS
tab(\t) allbox;
l ax .
[Ctrl+Insert]	Copy selection to Clipboard
[Shift+Insert]	Paste from Clipboard
.TE

.SH Ctrl+Alt Keys (non-BRIEF)
.TS
tab(\t) allbox;
l ax .
#[Alt+Ctrl+C]	Center on window
[Alt+Ctrl+R]	Toggle regexp search
[Alt+Ctrl+S]	Search backward
[Alt+Ctrl+A]	Case Sensitive Toggle
[Alt+Ctrl+F]	Search again backward
[Alt+Ctrl+T]	Translate backward
[Alt+Ctrl+C]	Copy to X Clipboard
[Alt+Ctrl+V]	Paste from X Clipboard
[Alt+Ctrl+X]	Cut to X Clipboard
.TE

.SH Extra Non-BRIEF Keys
.TS
tab(\t) allbox;
l ax .
[Alt+\]]	Matching delimiters
[Alt+/]	Completion
[Alt+!]	Run shell command and capture its output in new buffer
[Alt+Shift+X]	Exchange mark/point
[Alt+,]/[Ctrl+O<]	Uncomment block or line
[Alt+.]/[Ctrl+O>]	Comment out block or line
.TE

.SH Regular Expressions
You may perform search and replace operations with regular expression
(RE) support. The S-Lang library supports the following standard REs:

.TS
tab(\t) allbox;
l ax .
 .	match any character except newline
 *	matches zero or more occurences of previous RE
 +	matches one or more occurences of previous RE
 ?	matches zero or one occurence of previous RE
 ^	matches beginning of a line
 $	matches end of line
 [...]	matches any single character between brackets. For example, [-02468] matches `-' or any even digit and [-0-9a-z] matches `-' and any digit between 0 and 9 as well as letters a through z.
 \\<	Match the beginning of a word.
 \\>	Match the end of a word.
 \\(...\\)
 \\1,\\2,...,\\9	Matches the match specified by nth \\( ... \\) expression.
.TE

In addition, the following extensions are also supported:

.TS
tab(\t) allbox;
l ax .
\\c	turn on case-sensitivity (default)
\\C	turn off case-sensitivity
\\d	match any digit
\\e	match ESC char
.TE

For example, to replace "some text" with 'some text'
(notice: from double quotes to simple quotes), you will search for
"\\([a-zA-Z]*\\)" and replace it with '\\1'.

RE matching does not work across multiple lines.
Moreover, Jed's REs differ from egrep's in the following aspects:
the OR operator | is not supported;
grouping operators \\( and \\) are not used to group REs to form a single RE.
Thus, an expression such as \\(hello\\)* is not a
pattern to match zero or more occurances of hello as it is in e.g., egrep.

S-Lang files: regexp.sl 

.SH COMMAND LINE
From Command Line (F10) you can run any macro but also any application.
It is a powerfull tool.

If the line does not start with a special character it just runs CBRIEF
macros.

Sepcial Characters at the begin of line:

.TS
tab(\t) allbox;
l ax .
 $	then executes in the shell the following commands with eval(); this means S-Lang code.
 ?	it prints whatever it follows. (S-Lang). Example: '? 60*sin(0.8), buffer_filename()'
 !	runs shell command and returns the output in new buffer.
 <!	runs shell command and replaces the current buffer with output.
 <<!	runs shell command and insert the output in current buffer in current position.
 <	executes the command with the shell and replaces the current buffer with the output.
 <<	executes the command with the shell and inserts the output in the current buffer.
 >	writes the selected block or the whole buffer to file.
 >>	appends the selected block or the whole buffer to file.
 <<|	pipes the selected block or the whole buffer to file and outputs to the current position of current buffer.
 <|	pipes the selected block or the whole buffer to file and replaces the current buffer.
 |	pipes the selected block or the whole buffer to command and outputs to new buffer.
 &	executes the rest commands with the shell in the background and in new terminal.
.TE

\# --------------------------------------------------------------------------------
.SH MACROS

.TP
.I reset
Reassigns all keycodes in current keymap. (non-brief)

.TP
.I backspace
Backspaces and erases the character preceding the cursor.

.TP
.I back_tab
Moves the cursor to the previous tab stop without erasing tabs
or characters.

.TP
.I set_backup
Turns automatic backup on or off from inside BRIEF.

.TP
.I beginning_of_line
Places the cursor at column 1 of the current line.

.TP
.I block_search
Toggles whether or not Search forward, Search back, and Search
again are restricted to blocks.

.TP
.I buf_list
Displays the buffer list.

.TP
.I search_case
Toggles upper and lower case sensitivity.

.TP
.I center
Centers the text on a line between the first column and the
right margin.

.TP
.I center_line
Moves the current line, if possible, to the center (middle line)
of the current window. This only affects the display.

.TP
.I cd
Changes the current working directory.

.TP
.I output_file
Changes the output file name for the current buffer. You cannot
enter an existing file name. (Warning: Does not saves the file,
you have to press [Alt+W])

.TP
.I change_window
Initiates a switch from one window to another.

.TP
.I color
Resets the colors used for the background, foreground, titles,
and messages.

.TP
.I compile_it
Compiles the file in the current buffer (and loads it if it's
a BRIEF macro file).

.TP
.I copy
Copies the block of marked characters (selected by pressing A/t+M,
A/t+G, A/t+A, or A/t+L and highlighting the block with arrow keys
or commands) to the scrap, replacing the contents of the scrap
buffer and unmarking the block.

.TP
.I create_edge
Splits the current window in half either horizontally or vertically,
providing two views of the current buffer.

.TP
.I cut
Copies the block of marked characters to the scrap, then deletes it,
replacing the previous contents of the scrap and unmarking the block.

.TP
.I delete_char
Deletes the character at the cursor or, if a block is marked, deletes
(and unmarks) the marked block.

.TP
.I delete_curr_buffer
Deletes the current buffer and makes the next buffer in the buffer
list the current buffer.

.TP
.I del
Deletes a file from disk.

.TP
.I delete_line
Deletes the entire current line, regardless of the column position
of the cursor.

.TP
.I delete_next_word
Deletes from the cursor position to the start of the next word.

.TP
.I delete_previous_word/delete_prev_word
Deletes from the cursor position to the beginning of the previous word.

.TP
.I delete_to_bol
Deletes all characters before the cursor to the beginning of the
line. If the cursor is beyond the end of the line, the entire line
is deleted, including the newline character.

.TP
.I delete_to_eol
Deletes all characters from the current position to the end
of the line.

.TP
.I delete_edge 
Allows you to delete a window by deleting the window's edge.
(param. the edge, 1..4 i think)

.TP
.I display_file_name
Displays the name of the file associated with the current buffer
on the status line.

.TP
.I version
Displays BRIEF's version number and copyright notice on the
status line.

.TP
.I down
Moves the cursor down one line, retaining the column position.

.TP
.I drop_bookmark
Drops a numbered bookmark at the current position.

.TP
.I edit_file
Displays the specified file in the current window.

.TP
.I end_of_buffer
Moves the cursor to the last character in the buffer, which is
always a newline character.

.TP
.I end_of_line
Places the cursor at the last valid character of the current line.

.TP
.I end_of_window
Places the cursor at the last valid character of the current line.

.TP
.I enter
Depending on the mode being used (insert or overstrike), either
inserts a newline character at the current position, placing all
following characters onto a newly created next line, or moves the
cursor to the first column of the next line.

.TP
.I escape
Lets you cancel a command from any prompt.

.TP
.I execute_macro
Executes the specified command. This command is used to execute
any command without a key assignment, such as the Color command.

.TP
.I exit
Exits from BRIEF to OS asking to write the modified buffers.
Note: exit (gets args, "w" = save all before)

.TP
.I quit
Exits from BRIEF to OS without write the  buffers.

.TP
.I goto_line
Moves the cursor to the specified line number.

.TP
.I routines
Displays a window that lists the routines present in the current
file (if any).

.TP
.I halt
Terminates the following commands: 'Search forward',
'Search backward', 'Translate', 'Playback', 'Execute command'.
(partially)
	
.TP
.I help
Shows an information window with basic key-shortcuts.
	
.TP
.I long_help
Displays the full help file in a new buffer.

.TP
.I i_search
Searches for the specified search pattern incrementally, that is,
as you type it.

.TP
.I slide_in
When indenting is on and a block is marked, the Tab key indents all
the lines in the block to the next tab stop.

.TP
.I insert_mode
Switches between insert mode and overstrike mode. Backspace, Enter,
and Tab behave differently in insert mode than in overstrike mode.

.TP
.I goto_bookmark
Moves the cursor to the specified bookmark number.

.TP
.I left
Moves the cursor one column to the left, remaining on the same line.
When the cursor is moved into virtual space, it changes shape.

.TP
.I left_side
Moves the cursor to the left side of the window.

.TP
.I to_bottom
Scrolls the buffer, moving the current line, if possible, to the
bottom of the window.
	
.TP
.I to_top
Scrolls the buffer, moving the current line to the top of the
current window.

.TP
.I load_keystroke_macro
Loads a keystroke macro into memory, if the specified file can be
found on the disk.

.TP
.I load_macro
Loads a compiled macro file into memory, if the specified file can
be found on the disk.

.TP
.I tolower
Converts the characters in a marked block or the current line to
lowercase.
	
.TP
.I margin
Resets the right margin for word wrap, centering, and paragraph
reformatting. The preset margin is at the seventieth character.
	
.TP
.I mark
Marks a block in a buffer with no marked blocks.

.TS
tab(\t) allbox;
l ax .
mark/mark 0	remove mark.
mark 1	standard mark.
mark 2	Starts marking a rectangular block.
mark 3	Starts marking a line at a time.
mark 4	Equivalent to Mark 1, except that the marked area does not include the character at the end of the block.
.TE

Marks a block in a buffer with no marked blocks. When a block of
text is marked, several BRIEF commands can act on the entire block:
Cut to scrap, Copy to scrap, Delete, Indent block (in files with
programming support), Lower case block Outdent block (in files with
programming support), Print Search forward, Search backward, and
Search again (optionally; see the Block search toggle command)
Translate forward, Translate back, and Translate again Uppercase
block, Write.

When the Cut to scrap, Copy to scrap, Delete, Print, or Write
commands are executed on a block, the block becomes unmarked.

.TP
.I edit_next_buffer
Moves the next buffer in the buffer list, if one exists, into the
current window, making it the current buffer. The last remembered
position becomes the current position.

.TP
.I next_char
Moves the cursor to the next character in the buffer (if not at
the end of the buffer), treating tabs as single characters and
wrapping around line boundaries.

.TP
.I next_error
Locates the next error in the current file, if an error exists.

.TP
.I next_word
Moves the cursor to the first character of the next word.

.TP
.I open_line
Inserts a blank line after the current line and places the cursor
on the first column of this new line. If the cursor is in the
middle of an existing line, the line is not split.

.TP
.I slide_out
When indenting is on and a block is marked, the Tab key outdents
all the lines in the block to the next tab stop.

.TP
.I page_down
Moves the cursor down one page of text, where a page equals the
length of the current window.

.TP
.I page_up
Moves the cursor up one page of text, where a page equals the
length of the current window.

.TP
.I paste
Inserts (pastes) the current scrap buffer into the current buffer
immediately before the current position, taking the type of the
copied or cut block into account.

.TP
.I pause
Tells BRIEF to temporarily stop recording the current keystroke
sequence.

.TP
.I playback
Plays back the last keystroke sequence recorded with the Remember
command.

.TP
.I menu
Opens JED's menu bar.
(non-brief)

.TP
.I edit_prev_buffer
Displays the previous buffer in the buffer list in the current
window.
	
.TP
.I prev_char
Moves the cursor to the previous character in the buffer (if not at
the top of the buffer), treating tabs as single characters and
wrapping around line boundaries.

.TP
.I previous_word/prev_word
Moves the cursor to the first character of the previous word.

.TP
.I change_window
Quickly changes windows when you choose the arrow key that points
to the window you want.

.TP
.I quote
Causes the next keystroke to be interpreted literally, that is,
not as a command.

.TP
.I read_file
Reads a copy of the specified file into the current buffer,
inserting it immediately before the current position.

.TP
.I redo
Reverses the effect of commands that have been undone.
New edits to the buffer cause the undo information for commands
that were not redone to be purged.

.TP
.I reform
Reformats a paragraph, adjusting it to the current right margin.
	
.TP
.I toggle_re
Toggles whether or not regular expressions are recognized
in patterns.
	
.TP
.I remember
Causes BRIEF to remember a sequence of keystrokes.

.TP
.I move_edge
Changes the dimension of a window by moving the window's edge.

.TP
.I right
Moves the cursor one column to the right, remaining on the same
line. If the cursor is moved into virtual space, the cursor changes
shape.

.TP
.I right_side
Moves the cursor to the right side of the window, regardless of the
length of the line.

.TP
.I save_keystroke_macro
Save the current keystroke macro in the specified file. If no
extension is specified, .km is assumed.

.TP
.I screen_down
Moves the buffer, if possible, down one line in the window, keeping
the cursor on the same text line.

.TP
.I screen_up
Moves the buffer, if possible, up one line in the window, keeping
the cursor on the same text line.

.TP
.I search_again
Searches either forward or backward for the last given pattern,
depending on the direction of the previous search.

.TP
.I search_back
Searches backward from the current position to the beginning of the
current buffer for the given pattern.

.TP
.I search_fwd
Searches forward from the current position to the end of the
current buffer for the given pattern.

.TP
.I dos
Gets parameter the command-line and pauses at exit,
or just runs the shell.
Exits temporarily to the operating system.

.TP
.I swap_anchor
Exchanges the current cursor position with the mark.

.TP
.I tabs
Sets the tab stops for the current buffer.

.TP
.I top_of_buffer
Moves the cursor to the first character of the buffer.

.TP
.I top_of_window
[Ctrl+Home] moves the cursor to the top line of the current window,
retaining the column position. [Home] [Home] moves the cursor to
the line and the first column of the current window.

.TP
.I translate_again
Searches again for the specified pattern in the direction of the
previous Translate command, replacing it with the given string.

.TP
.I translate_back
Searches for the specified pattern from the current position to the
beginning of the buffer, replacing it with the given string.

.TP
.I translate
Searches for the specified pattern from the current position to the
end of the buffer, replacing it with the given string.

.TP
.I undo
Reverses the effect of the last n commands (or as many as your
memory can hold). Any command that writes changes to disk (such as
Write) cannot be reversed.

.TP
.I up
Moves the cursor up one line, staying in the same column. When the
cursor is moved into virtual space, it changes shape.

.TP
.I toupper
Converts the characters in a marked block to uppercase.

.TP
.I use_tab_char
Determines whether spaces or tabs are inserted when the Tab key is
pressed to add filler space.

.TP
.I write_buffer
Writes the current buffer to disk or, if a block of text is marked,
prompts for a specific file name. BRIEF does not support writing
column blocks.

.TP
.I write_and_exit
Writes all modified buffers, if any, and exits BRIEF without
prompting.

.TP
.I zoom_window
If there is more than one window on the screen, Zoom window toggle
will enlarge the current window to a full screen window, and save
the previous window configuration.

.TP
.I whichkey
Tells which command is invoked by a key.
(brief, non-std)

.TP
.I showkey
Describes the key.
(Jed, same as whichkey)

.TP
.I ascii_code
Inserts character by ASCII code.
(brief, non-std)

.TP
.I save_position
Save cursor position into the stack.

.TP
.I restore_position
Restores previous cursor position from stack.

.TP
.I insert
Inserts a string into the current position.

.TP
.I _home
BRIEF's home key.

.TS
tab(\t) allbox;
l ax .
[Home]	Beginning of Line.
[Home][Home]	Top of Window.
[Home][Home][Home]	Beginning of Buffer.
.TE

There was 2 version of home macro, the _home and the new_home.
The only I remember is that the _home could	not stored in
KeyStroke Macros. The same for the _end.

.TP
.I _end
BRIEF's end key.

.TS
tab(\t) allbox;
l ax .
[End]	End of Line.
[End][End]	Bottom of Window.
[End][End][End]	End of Buffer.
.TE

.TP
.I brace
BRIEF's check braces macro (the buggy one).

.TP
.I comment_block
Comment out block or line

.TP
.I uncomment_block
Uncomment block or line

.TP
.I dired
Jed's dired macro (file manager).

.TP
.I build_it
Runs make (non-brief)

.TP
.I tocapitalize
Jed's xform_region('c'). (non-brief)

.TP
.I man
Shows a man page. (non-brief)

.TP
.I pwd
Displays the current working directory.
Same as `cd` without parameters. (non-brief)

.TP
.I ren
Rename file. (non-brief)

.TP
.I cp
Copy file. (non-brief)

.TP
.I occur
Jed's 'occur' macro. (non-brief, JED)

.TP
.I moccur
Jed's 'moccur' macro. (non-brief, JED)

.TP
.I color_scheme
Displays or selects a color scheme. ('^AiC' for UI)
(non-brief)

.TP
.I xcopy
Copies the selected block to system clipboard.
(non-brief)

.TP
.I xpaste
Inserts the contents of system clipboard into the current bufffer. (non-brief)

.TP
.I xcut
Copies the selected block to system clipboard, and remove it. (non-brief)

