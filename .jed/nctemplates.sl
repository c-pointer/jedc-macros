% Open templates and do some replacements
%
% based on work of Günter Milde (milde users.sf.net)
% Released under the terms of the GNU General Public License (ver. 3 or later)
%
% 2022-09-09 nicholas christopoulos
%		nc-templates, part of cbrief packages.
%		all variables are in @{name} form.
%		severe new variables.
%		
%		$JED_HOME/templates/template-vars.txt
%		Custom template variables values of this template can be:
%		a. simple text,
%		b. begins with $ for environment variable,
%		c. begins with ? for S-Lang code,
%		d. begins with ! for shell output
%

require("nc-utils");
autoload("cbrief_cli_append",  "cbrief");
autoload("cbrief_menu",        "cbrief");
autoload("cbrief_menu_insert", "cbrief");
autoload("cbrief_setkey",      "cbrief");

% templates directory
custom_variable("Templates_Path", vdircat(Jed_Home_Directory, "templates"));

implements("nctemplates");

% special strings that get replaced with autogenerated values
static variable replacements = Assoc_Type[String_Type];

% Return a string with current date in YYYY-MM-DD format
static define get_iso_date() {
	variable time_struct = localtime(_time);
	return sprintf("%d-%02d-%02d", time_struct.tm_year+1900, time_struct.tm_mon+1, time_struct.tm_mday);
	}
static define get_iso_year() {
	variable time_struct = localtime(_time);
	return sprintf("%d", time_struct.tm_year+1900);
	}
static define get_greek_date() {
	variable time_struct = localtime(_time);
	return strftime("%A %d %B %Y", time_struct);
	}
public define insert_iso_date()
{ insert(get_iso_date()); }

static define update_replacements() {
	variable fp, vars, buf;
	variable n, k, v, c, s;
	
	replacements["@{author}"]        = extract_element(get_realname(), 0, ',');
	replacements["@{user}"]          = get_username();
	replacements["@{email}"]         = get_emailaddress();
	replacements["@{filename}"]      = path_basename(buffer_filename);
	replacements["@{filename_sans}"] = path_sans_extname(replacements["@{filename}"]);
 	replacements["@{date}"]          = get_iso_date();
 	replacements["@{greek-date}"]    = get_greek_date();
 	replacements["@{year}"]          = get_iso_year();
 	replacements["@{copyright}"]     = "(c)";
 	replacements["@{copyleft}"]      = "(ͻ)";

	% load customized variables from data-file
	vars = vdircat(Templates_Path, "template-vars.txt");
	if ( access(vars, R_OK) == 0 ) {
		fp = fopen(vars, "r");
		if ( fp != NULL ) {
			while ( fgets(&buf, fp) != -1 ) {
				n = is_substr(buf, "=");
				if ( n ) {
					k = strtrim(substr(buf, 1, n - 1));
					v = strtrim(substr(buf, n + 1, (strlen(buf) - n) - 1));
					c = substr(v, 1, 1);
					if ( c == "$" ) {
						v = strtrans(substr(v, 2, strlen(v) - 1), "{}", "");
						if ( getenv(v) != NULL )
							v = getenv(v);
						else
							v = "";
						}
					else if ( c == "?" ) {
						v = strtrim(substr(v, 2, strlen(v) - 1));
						s = eval(v);
						if ( typeof(s) == Integer_Type )
							v = sprintf("%d", s);
						else if ( typeof(s) == Double_Type )
							v = sprintf("%f", s);
						else if ( typeof(s) == String_Type )
							v = s;
						else
							v = "(unsupported type)";
						}
					else if ( c == "!" ) {
						variable er, es;
						s = strtrim(substr(v, 2, strlen(v) - 1));
						(v, es, er) = c_shell(s + " 2>&1");
						}
				 	replacements["@{" + k + "}"] = v;
					} % n
				} % fgets
			() = fclose(fp);
			}
		}
	}

%
static define insert_template_file(name) {
	variable result;
	% insert the file
	push_mark();
	result = insert_file(name);
	narrow();
	
	% replace tags
	bob;
	update_replacements();
	foreach(replacements) using ("keys", "values")
		replace();

	% place cursor/point
	if ( fsearch("@{point}") )
		deln(strlen("@{point}"));
	else
		bob();

	widen();
	return result;
	}

%
public define template_use() {
	variable newbuf = "*newfile*", template = (_NARGS) ? () : NULL, n, ex;
	
	if ( bufferp(newbuf) )
		newbuf += "+";

	if ( template == NULL )
		template = dlg_selectfile("Template", Templates_Path);
	if ( typeof(template) == String_Type && strlen(template) ) {
		n = file_status(template);
		if ( n == 0 )
			uerror("File does not exist.");
		else if ( n == 1 ) {
			try ( ex ) {
				sw2buf(newbuf);
				() = insert_template_file(template);
				call_function("mode_hook", file_type(template));
				set_buffer_modified_flag(0);
				}
			catch AnyError: { uerrorf("Caught %s, %s:%d -- %s", ex.descr, ex.file, ex.line, ex.message); n = -1; }
			if ( n > 0 )
				message("Template inserted.");
			}
		}
	}

public define insert_quotes() {
	variable table = [ "«", "»", "“", "”", "‘", "’", "⟨", "⟩", "‹", "›" ];
	variable sel = 0;
	sel = dlg_listbox4(" Alternate Quotes ", table, sel, 0x40 | 0x20);
	if ( sel >= 0 )
		insert(table[sel]);
	scr_touch();
	}

public define insert_drawchar() {
	variable table = [ "┃", "━", "╏", "╍", "┏", "┓", "┗", "┛", "┣", "┫", "┳", "┻", "╋" ];
	variable sel = 0;
	sel = dlg_listbox4(" Drawing Chars ", table, sel, 0x40 | 0x20);
	if ( sel >= 0 )
		insert(table[sel]);
	scr_touch();
	}

% (output, exit_status, errno) = c_shell( command );
static define init_unit_templ() {
	cbrief_cli_append("template_use",    &template_use, 6,
"template_use [file]\n\
	Apply a template in a new buffer. If no 'file' given, selects from dialog box.");
	cbrief_cli_append("insert_template", "template_use", 7, NULL); % alias
	cbrief_cli_append("insert_iso_date", &insert_iso_date, 0,
"insert_iso_date\n\
	Inserts the data in ISO format (yyyy-mm-dd) in the current position.");
	cbrief_cli_append("insert_quotes", &insert_quotes, 0,
"insert_quotes\n\
	Selects alternative quote symbols from popup menu." );
	cbrief_cli_append("insert_drawchar", &insert_drawchar, 0,
"insert_drawchar\n\
	Selects drawing characters from popup menu." );

	cbrief_setkey("template_use", "^Ot");
	cbrief_setkey("insert_iso_date", "^Od");
	cbrief_setkey("insert_quotes", "^O'");
	cbrief_setkey("insert_drawchar", "^O-");

	cbrief_menu_insert("Global.&File", "&New from Template", "template_use", 0);
	cbrief_menu("Global.&Edit", "&Insert", "@{popup}");
	cbrief_menu("Global.&Edit.&Insert", "Insert &Template", "template_use");
	cbrief_menu("Global.&Edit.&Insert", "Insert ISO &Date", "insert_iso_date");
	cbrief_menu("Global.&Edit.&Insert", "Insert &Quotes", "insert_quotes");
	cbrief_menu("Global.&Edit.&Insert", "Insert Dra&w Character", "insert_drawchar");
	}
init_unit_templ();
provide("nctemplates");
